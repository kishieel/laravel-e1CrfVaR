openapi: 3.0.3
info:
  title: 'Laravel e1CrfVar - documentation'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/auth/sign-up:
    post:
      summary: ''
      operationId: postApiAuthSignUp
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: augusta.nolan@example.com
                title:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: zglqwgfrsu
                password:
                  type: string
                  description: ''
                  example: 'd9R|%@D-!jD5O/*q-'
                first_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: wtsoorbytbsupb
                last_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: cvymlny
                picture:
                  type: string
                  description: ''
                  example: null
              required:
                - email
                - title
                - password
                - first_name
                - last_name
      security: []
  /api/auth/issue-token:
    post:
      summary: ''
      operationId: postApiAuthIssueToken
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: windler.julianne@example.org
                password:
                  type: string
                  description: ''
                  example: maI)lQ8.KE7@O=
              required:
                - email
                - password
      security: []
  /api/auth/refresh-token:
    post:
      summary: ''
      operationId: postApiAuthRefreshToken
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Auth
  /api/tasks:
    get:
      summary: ''
      operationId: getApiTasks
      description: ''
      parameters:
        -
          in: query
          name: page
          description: 'The page number for pagination (default: 1).'
          example: 14
          required: false
          schema:
            type: integer
            description: 'The page number for pagination (default: 1).'
            example: 14
        -
          in: query
          name: limit
          description: 'The number of items per page (default: 10).'
          example: 11
          required: false
          schema:
            type: integer
            description: 'The number of items per page (default: 10).'
            example: 11
        -
          in: query
          name: search
          description: 'Search query to filter tasks by title, description or status.'
          example: beatae
          required: false
          schema:
            type: string
            description: 'Search query to filter tasks by title, description or status.'
            example: beatae
        -
          in: query
          name: 'sort[]'
          description: 'Sort users by columns and direction (e.g., sort[]=name:asc).'
          example: omnis
          required: false
          schema:
            type: string
            description: 'Sort users by columns and direction (e.g., sort[]=name:asc).'
            example: omnis
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  links:
                    first: 'http://localhost/api/tasks?page=1'
                    last: 'http://localhost/api/tasks?page=1'
                    prev: 'http://localhost/api/tasks?page=13'
                    next: null
                  meta:
                    current_page: 14
                    from: null
                    last_page: 1
                    links:
                      -
                        url: 'http://localhost/api/tasks?page=13'
                        label: '&laquo; Previous'
                        active: false
                      -
                        url: 'http://localhost/api/tasks?page=1'
                        label: '1'
                        active: false
                      -
                        url: null
                        label: 'Next &raquo;'
                        active: false
                    path: 'http://localhost/api/tasks'
                    per_page: 11
                    to: null
                    total: 2
                properties:
                  data:
                    type: array
                    example: []
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'http://localhost/api/tasks?page=1'
                      last:
                        type: string
                        example: 'http://localhost/api/tasks?page=1'
                      prev:
                        type: string
                        example: 'http://localhost/api/tasks?page=13'
                      next:
                        type: string
                        example: null
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 14
                      from:
                        type: string
                        example: null
                      last_page:
                        type: integer
                        example: 1
                      links:
                        type: array
                        example:
                          -
                            url: 'http://localhost/api/tasks?page=13'
                            label: '&laquo; Previous'
                            active: false
                          -
                            url: 'http://localhost/api/tasks?page=1'
                            label: '1'
                            active: false
                          -
                            url: null
                            label: 'Next &raquo;'
                            active: false
                        items:
                          type: object
                          properties:
                            url:
                              type: string
                              example: 'http://localhost/api/tasks?page=13'
                            label:
                              type: string
                              example: '&laquo; Previous'
                            active:
                              type: boolean
                              example: false
                      path:
                        type: string
                        example: 'http://localhost/api/tasks'
                      per_page:
                        type: integer
                        example: 11
                      to:
                        type: string
                        example: null
                      total:
                        type: integer
                        example: 2
      tags:
        - Tasks
    post:
      summary: ''
      operationId: postApiTasks
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: amet
                description:
                  type: string
                  description: ''
                  example: 'Qui magnam eum consequuntur dolor voluptatem.'
                status:
                  type: string
                  description: ''
                  example: REJECTED
                  enum:
                    - TODO
                    - IN_PROGRESS
                    - REVIEW
                    - DONE
                    - REJECTED
              required:
                - title
                - description
                - status
  '/api/tasks/{id}':
    get:
      summary: ''
      operationId: getApiTasksId
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    user_id: 1
                    title: 'Id aperiam ex sunt voluptas qui. Aut voluptate architecto qui voluptates praesentium quae. Temporibus et consectetur labore unde vitae dolores voluptatem. Tenetur a quia sed. Cumque magnam fugiat iste facilis. Corporis aut beatae et vero.'
                    description: 'Dignissimos consequatur est voluptatibus minima nesciunt. Voluptas qui consequatur placeat. Delectus laborum voluptate a architecto eos.'
                    status: TODO
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      user_id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: 'Id aperiam ex sunt voluptas qui. Aut voluptate architecto qui voluptates praesentium quae. Temporibus et consectetur labore unde vitae dolores voluptatem. Tenetur a quia sed. Cumque magnam fugiat iste facilis. Corporis aut beatae et vero.'
                      description:
                        type: string
                        example: 'Dignissimos consequatur est voluptatibus minima nesciunt. Voluptas qui consequatur placeat. Delectus laborum voluptate a architecto eos.'
                      status:
                        type: string
                        example: TODO
      tags:
        - Tasks
    put:
      summary: ''
      operationId: putApiTasksId
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Tasks
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: ''
                  example: amet
                description:
                  type: string
                  description: ''
                  example: 'Blanditiis quia rem odit libero.'
                status:
                  type: string
                  description: ''
                  example: DONE
                  enum:
                    - TODO
                    - IN_PROGRESS
                    - REVIEW
                    - DONE
                    - REJECTED
    delete:
      summary: ''
      operationId: deleteApiTasksId
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Tasks
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the task.'
        example: 1
        required: true
        schema:
          type: integer
  /api/user-import:
    post:
      summary: ''
      operationId: postApiUserImport
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                external_id:
                  type: string
                  description: ''
                  example: tempore
                password:
                  type: string
                  description: ''
                  example: 'y:ua%H30G/~$Ok'
              required:
                - external_id
                - password
tags:
  -
    name: Auth
    description: ''
  -
    name: Tasks
    description: ''
  -
    name: Users
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
